//--- Implementing the Dynamic Insertion Policy ---//

#include "cache.h"
#include <random>
#include <unordered_set>

#define NUM_CPU 4
#define NUM_CONSTITUENCY 64
#define EPSILON 0.05

std::vector<std::unordered_set<uint32_t>> lru_sets(NUM_CPU); // sets dedicated to lru
std::vector<std::unordered_set<uint32_t>> bip_sets(NUM_CPU); // sets dedicated to bip
std::vector<int64_t> PSEL; // when PSEL >= 0, follower sets use LRU policy; when PSEL < 0, follower sets use BIP policy


std::default_random_engine gen(std::random_device{}());
std::uniform_int_distribution<int> dist_int(0, NUM_CONSTITUENCY - 1);
std::uniform_real_distribution<double> dist_double(0.0, 1.0);

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    PSEL.resize(NUM_CPU, 0);

    // Dedicate one set in each constituency to LRU and BIP respectively
    for (int i = 0; i < NUM_CONSTITUENCY; ++i) {
        for (int j = 0; j < NUM_CPU; ++j) {
            lru_sets[j].insert(i * NUM_CONSTITUENCY + dist_int(gen));
            bip_sets[j].insert(i * NUM_CONSTITUENCY + dist_int(gen));
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    if (hit) {
        // cache hit update is same as LRU
        lru_update(set, way);
    } else {
        // cache miss and cache fill
        if (lru_sets[cpu].count(set) > 0) {
            // LRU set
            lru_update(set, way);
            PSEL[cpu]--;
        } else if (bip_sets[cpu].count(set) > 0) {
            // BIP set
            if (dist_double(gen) < EPSILON) {
                lru_update(set, way);
            } else {
                block[set][way].lru = NUM_WAY - 1;
            }
            PSEL[cpu]++;
        } else {
            // follower set
            if (PSEL[cpu] >= 0) {
                // LRU update
                lru_update(set, way);
            } else {
                // BIP update
                if (dist_double(gen) < EPSILON) {
                    lru_update(set, way);
                } else {
                    block[set][way].lru = NUM_WAY - 1;
                }
            }
        }
    }
}

void CACHE::llc_replacement_final_stats()
{

}
